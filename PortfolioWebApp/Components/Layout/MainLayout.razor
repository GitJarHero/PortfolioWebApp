@using PortfolioWebApp.Services.Chat
@using PortfolioWebApp.Shared
@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDirectChatStorageService DirectChatStorageService
@inject IDirectChatHubConnectionService DirectChatConnectionService
@inject ILogger<MainLayout> Logger


<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Fixed="true" Height="60px" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@ToggleDrawer"/>
        <MudSpacer/>
        <MudText Typo="Typo.h6" Class="ml-2">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor"></MudIcon>
            MudBlazor
        </MudText>
        <MudSpacer/>
        <MudSwitch T="bool"
                   Value="_isDarkMode"
                   ValueChanged="OnDarkModeChanged"
                   Color="Color.Primary"
                   Class="ma-4"
                   Label="Toggle Light/Dark Mode" />

        <AuthorizeView>
            <Authorized>
                <MudText Color="Color.Success" Typo="Typo.body1" Class="mr-2">Logged in as: @context.User.Identity?.Name</MudText>
            </Authorized>
            <NotAuthorized>
                <MudText Typo="Typo.body2" Class="mr-2">Not logged in</MudText>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <NavMenu @bind-Open="_open" />

    <MudMainContent>
     
            @Body
       
    </MudMainContent>
</MudLayout>


<!-- Loading Overlay -->
<div class="loading-overlay @(HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated && !DirectChatStorageService.ChatsLoaded() ? "" : "hidden")">
    <MudText Typo="Typo.h6" Class="mb-4 text-center">@loadingMessage</MudText>
    <MudProgressLinear Value="@loadingProgress" Color="Color.Primary" Style="width: 50%;" />
</div>
<!--suppress CssUnresolvedCustomProperty -->
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: var(--mud-palette-background); /* passt sich deinem Theme an */
        z-index: 10000;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        opacity: 1;
        transition: none;
        pointer-events: auto;
    }

    .loading-overlay.hidden {
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.5s cubic-bezier(0, 0, 1, 0);
    }

</style>

@code {
    private bool _open = true;
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private bool _firstRender = true;
    
    protected override void OnInitialized() {
        // read dark mode cookie on server rendering to avoid 'flash of light mode'
        var context = HttpContextAccessor.HttpContext;
        if (context != null) {
            var cookie = context.Request.Cookies["darkMode"];
            if (bool.TryParse(cookie, out var result)) {
                _isDarkMode = result;
            }
        }
    }
    
    private int loadingProgress = 0;
    private string loadingMessage = "Loading chats...";
    
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true) {
                if (!DirectChatStorageService.ChatsLoaded()) {
                    DirectChatStorageService.OnProgressChanged += (p, message) => {
                        loadingProgress = p;
                        loadingMessage = message;
                        InvokeAsync(StateHasChanged);
                    };
                    await DirectChatStorageService.LoadChatsAsync(user.Identity.Name);
                }

                if (!DirectChatConnectionService.IsConnected()) {
                    Logger.LogInformation("Calling DirectChatConnectionService.Connect()");
                    await DirectChatConnectionService.Connect();
                    
                    var newMessages = await DirectChatStorageService.MarkNewMessagesAsDeliveredAsync();
                    foreach (var messageDeliveredDto in newMessages) {
                        // inform the hub that we received the messages
                        await DirectChatConnectionService.SendMessageDelivered(messageDeliveredDto);
                    }
                }
            }
        }
    }

    private async Task OnDarkModeChanged(bool value) {
        _isDarkMode = value;
        await JS.InvokeVoidAsync("cookieHelper.setDarkMode", _isDarkMode.ToString().ToLower());
    }
    
    private void ToggleDrawer() {
        _open = !_open;
    }
}